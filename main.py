import os
import asyncio
import feedparser
from datetime import datetime
import pytz
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = 843629315

# –î–∂–µ—Ä–µ–ª–∞ RSS (–ø—Ä–∏–∫–ª–∞–¥–∏)
RSS_FEEDS = [
    "https://www.forexfactory.com/ffcal-weekly.xml",      # ForexFactory –∫–∞–ª–µ–Ω–¥–∞—Ä
    "https://www.investing.com/rss/news_25.rss",         # Investing.com Forex News
    "https://www.dailyfx.com/feeds/all",                  # DailyFX RSS (–∑–∞–≥–∞–ª—å–Ω–∏–π)
    "https://www.fxstreet.com/rss/news",                  # FXStreet News RSS
    "https://www.forexlive.com/rss",                      # Forexlive RSS
    # Bloomberg –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ RSS - —Ç—Ä–µ–±–∞ –ø–∞—Ä—Å–∏—Ç–∏ –≤—Ä—É—á–Ω—É –∞–±–æ API
]

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ EUR/USD
KEYWORDS = [
    "eurusd", "eur/usd", "usd", "euro", "eurozone", "us inflation", "fed", "ecb", "cpi", "interest rate",
    "inflation", "usdollar", "usdollar index", "eur", "usd economic", "usd data"
]

# –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞ –ü—Ä–∞–≥–∏
PRAGUE_TZ = pytz.timezone("Europe/Prague")

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –Ω–æ–≤–∏–Ω
sent_news_ids = set()

def format_date(date_obj):
    return date_obj.strftime("%A, %d %B")

def format_news_message(entry):
    # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ entry –º—ñ—Å—Ç–∏—Ç—å title, published, summary (–∞–±–æ description), link
    
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∏ –≤ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ü—Ä–∞–≥–∏
    published_parsed = entry.get('published_parsed')
    if published_parsed:
        dt_utc = datetime(*published_parsed[:6], tzinfo=pytz.UTC)
        dt_local = dt_utc.astimezone(PRAGUE_TZ)
        date_str = format_date(dt_local)
        time_str = dt_local.strftime("%H:%M")
        now = datetime.now(PRAGUE_TZ)
        if dt_local.date() != now.date():
        continue
    else:
        date_str = "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞"
        time_str = "??:??"
    
    # –ü–∞—Ä—Å–∏–º–æ —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ (summary –∞–±–æ title) –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–ª—é—á–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö ‚Äî —Å–ø—Ä–æ—â–µ–Ω–æ
    title = entry.get("title", "")
    summary = entry.get("summary", "")
    
    # –§—ñ–∫—Ç–∏–≤–Ω—ñ –ø–æ–ª—è, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤—Å—ñ RSS –¥–∞—é—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    impact = "–í–∏—Å–æ–∫–∏–π"
    potential = "50‚Äì90 –ø—ñ–ø—Å—ñ–≤"
    scenario = "–Ø–∫—â–æ CPI –Ω–∏–∂—á–µ ‚Üí USD –ø–∞–¥–∞—î ‚Üí EUR/USD –≤–≥–æ—Ä—É"
    
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = (
        f"üìÜ {date_str}\n\n"
        f"üí• –í–∞–∂–ª–∏–≤–∞ –Ω–æ–≤–∏–Ω–∞ —á–µ—Ä–µ–∑ 1 –≥–æ–¥:\n"
        f"üá∫üá∏ {title}\n"
        f"‚è∞ –ß–∞—Å: {time_str} (–∑–∞ –ü—Ä–∞–≥–æ–π)\n"
        f"üìà –ü—Ä–æ–≥–Ω–æ–∑: - | –ü–æ–ø–µ—Ä–µ–¥–Ω—î: -\n\n"
        f"üéØ –í–ø–ª–∏–≤ –Ω–∞ EUR/USD: {impact}\n"
        f"‚öñÔ∏è –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª —Ä—É—Ö—É: {potential}\n"
        f"üìå –°—Ü–µ–Ω–∞—Ä—ñ–π: {scenario}"
    )
    return message

async def send_news(app):
    global sent_news_ids
    for feed_url in RSS_FEEDS:
        feed = feedparser.parse(feed_url)
        # –°–æ—Ä—Ç—É—î–º–æ –≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏—Ö –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö
        sorted_entries = sorted(
            feed.entries,
            key=lambda e: e.get('published_parsed', (1970,1,1,0,0,0,0,0,0)),
            reverse=False
        )
        for entry in sorted_entries:
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö —É –∑–∞–≥–æ–ª–æ–≤–∫—É –∞–±–æ –æ–ø–∏—Å—ñ
            text = (entry.get("title","") + " " + entry.get("summary","")).lower()
            if any(keyword in text for keyword in KEYWORDS):
                news_id = entry.get("id", entry.get("link"))
                if news_id not in sent_news_ids:
                    sent_news_ids.add(news_id)
                    message = format_news_message(entry)
                    try:
                        await app.bot.send_message(chat_id=CHAT_ID, text=message)
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–∏–Ω–∏: {e}")

async def news_job(context: ContextTypes.DEFAULT_TYPE):
    await send_news(context.application)

async def start(update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ç–æ–±—ñ –≤–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏ –ø–æ EUR/USD –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω."
    )

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.job_queue.run_repeating(news_job, interval=1800, first=10)
    app.run_polling()
